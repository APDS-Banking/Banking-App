version: 2.1

executors:
  node-executor:
    docker:
      - image: circleci/node:16  # Node.js 16.x Docker image

jobs:
  install-dependencies:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:  # Try to restore node_modules from the cache
          keys:
            - v1-dependencies-{{ checksum "client/package-lock.json" }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: |
            cd client
            npm ci  # Use clean install for CI environments
      - save_cache:  # Save node_modules to the cache
          paths:
            - client/node_modules
          key: v1-dependencies-{{ checksum "client/package-lock.json" }}

  build:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Build Client
          command: |
            cd client
            npm run build  # Run Vite build command

  lint:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "client/package-lock.json" }}
      - run:
          name: Lint Code
          command: |
            cd client
            npm run lint  # Run ESLint

  test:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:  # Restore node_modules from cache to avoid reinstalling dependencies
          keys:
            - v1-dependencies-{{ checksum "client/package-lock.json" }}
      - run:
          name: Run Tests
          command: |
            cd client
            npm run test  # Run Jest tests
      - store_test_results:  # Save test results
          path: client/test-results
      - store_artifacts:  # Save test artifacts (e.g., reports)
          path: client/test-results
      - save_cache:  # Cache the test-results directory if needed for reuse
          paths:
            - client/test-results
          key: v1-test-results-{{ checksum "client/test-results" }}

workflows:
  version: 2
  build_and_test:
    jobs:
      - install-dependencies
      - build:
          requires:
            - install-dependencies
      - lint:
          requires:
            - install-dependencies
      - test:
          requires:
            - install-dependencies
